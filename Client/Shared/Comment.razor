@inject HttpClient http
@inject JSLogger logger
@inject State state
@using System.Text.Json

<li class="media mt-3">
    <img src="api/users/@Model.Author.Id/avatar" style="width:32px;height:auto;" class="mr-2">
    <div class="media-body" style="max-width: 90%;">
        <h6 class="mt-0 mb-1 text-muted">@Model.Author.FirstName @Model.Author.LastName</h6>
        <p style="white-space: pre-wrap;margin-bottom:0px;">@Model.Content</p>
        <div>
            <button class="comment-button" @onclick="(e) => SetCurrentAction(CurrentAction.Reply)">Reply<span class="oi oi-comment-square"></span></button>
            @if (state.User.Admin || state.User.Id == Model.Author.Id)
            {   
                <button class="comment-button" @onclick="(e) => SetCurrentAction(CurrentAction.Edit)">Edit<span class="oi oi-pencil"></span></button>
                <button class="comment-button" @onclick="(e) => Delete()">Delete<span class="oi oi-trash"></span></button>
            }
        </div>

        <div hidden="@(currentAction == CurrentAction.None)">
            <textarea class="form-control mt-2" placeholder="Content" rows="3" style="margin-bottom: 0; height: 50px; background-color: #333; color: #fff;" @bind="@textareaText"></textarea>
            <button class="btn btn-primary mt-2" @onclick="Submit">@currentAction</button>
        </div>
        
        @if(Model.Replies.Count > 0)
        {
            @if (Depth < 4)
            {  
                <ul class="mt-3 pl-1">
                    @for (int i = 0; i < Model.Replies.Count; i++)
                    {
                        <Comment Model="Model.Replies[i]" Depth="@(Depth + 1)" NotifyRoot="NotifyRoot" RemoveComment="(item) => { Model.Replies.Remove(item); StateHasChanged(); }"></Comment>
                    }
                </ul>
            }
            else
            {
                <div class="px-2 py-1 mt-2 rounded bg-secondary" style="cursor: pointer;" @onclick="async () => { await NotifyRoot(Model.Id); }">SHOW MORE</div>
            }
        }

    </div>
</li>

@code {
    [Parameter]
    public ReplyModel Model { get; set; }

    [Parameter]
    public int Depth { get; set; }

    [Parameter]
    public Func<Guid, Task> NotifyRoot { get; set; }

    [Parameter]
    public Action<ReplyModel> RemoveComment { get; set; }

    CurrentAction currentAction;
    string textareaText;
    void SetCurrentAction (CurrentAction newAction)
    {
        if (currentAction == newAction)
        {
            currentAction = CurrentAction.None;
        }
        else
        {
            currentAction = newAction;
        }
        
        if(currentAction == CurrentAction.Reply)
        {
            textareaText = String.Empty;
        }
        else if(currentAction == CurrentAction.Edit)
        {
            textareaText = Model.Content;
        }
    }

    async Task Submit()
    {
        var request = new HttpRequestMessage(new HttpMethod(currentAction == CurrentAction.Reply ? "POST" : "PATCH"), $"api/replies/{Model.Id}");
        
        request.Content = new FormUrlEncodedContent(new List<KeyValuePair<string, string>> 
        {
            new KeyValuePair<string, string>("Content",textareaText)
        });

        var response = await http.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            if (currentAction == CurrentAction.Reply)
            {
                var newComment = JsonSerializer.Deserialize<ReplyModel>(await response.Content.ReadAsStringAsync(), new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                newComment.Replies = new List<ReplyModel>();
                logger.log(newComment);
                Model.Replies.Add(newComment);
            }
            else
            {
                Model.Content = textareaText;
            }
            SetCurrentAction(CurrentAction.None);
        }
    }

    async Task Delete()
    {
        await http.DeleteAsync($"api/replies/{Model.Id}");
        RemoveComment(Model);
    }

    private enum CurrentAction {None, Reply, Edit}

}