@page "/findinstructor"
@attribute [Authorize]
@inject JSLogger logger
@inject HttpClient http
@inject State state

<div class="row">
    <div class="col-sm">
        <div class="row">
            <div class="col">
                <h5>Set Session Lessons</h5>
                <div class="form-check">
                    <input type="checkbox" class="form-check-input" id="c0" @bind="subjects[0]" @bind:event="oninput" @onchange="() => DigestSubjectsArray()">
                    <label class="form-check-label" for="c0">Math</label>
                </div>
                <div class="form-check">
                    <input type="checkbox" class="form-check-input" id="c1" @bind="subjects[1]" @bind:event="oninput" @onchange="() => DigestSubjectsArray()">
                    <label class="form-check-label" for="c1">Physics</label>
                </div>
                <div class="form-check">
                    <input type="checkbox" class="form-check-input" id="c2" @bind="subjects[2]" @bind:event="oninput" @onchange="() => DigestSubjectsArray()">
                    <label class="form-check-label" for="c2">Chemistry</label>
                </div>
                <div class="form-check">
                    <input type="checkbox" class="form-check-input" id="c3" @bind="subjects[3]" @bind:event="oninput" @onchange="() => DigestSubjectsArray()">
                    <label class="form-check-label" for="c3">Biology</label>
                </div>
                <div class="form-check">
                    <input type="checkbox" class="form-check-input" id="c4" @bind="subjects[4]" @bind:event="oninput" @onchange="() => DigestSubjectsArray()">
                    <label class="form-check-label" for="c4">Literature</label>
                </div>
                <div class="form-check">
                    <input type="checkbox" class="form-check-input" id="c5" @bind="subjects[5]" @bind:event="oninput" @onchange="() => DigestSubjectsArray()">
                    <label class="form-check-label" for="c5">History</label>
                </div>
                <div class="form-check">
                    <input type="checkbox" class="form-check-input" id="c6" @bind="subjects[6]" @bind:event="oninput" @onchange="() => DigestSubjectsArray()">
                    <label class="form-check-label" for="c6">Philosophy</label>
                </div>
                <div class="form-check">
                    <input type="checkbox" class="form-check-input" id="c7" @bind="subjects[7]" @bind:event="oninput" @onchange="() => DigestSubjectsArray()">
                    <label class="form-check-label" for="c7">English</label>
                </div>
                <div class="form-check">
                    <input type="checkbox" class="form-check-input" id="c8" @bind="subjects[8]" @bind:event="oninput" @onchange="() => DigestSubjectsArray()"> <!--Also reserve 9,10 for 8 diff 2nd lang-->
                    <label class="form-check-label" for="c8">2nd Language</label>
                </div>
            </div>
            
            <div class="col">
                @if (SelectedSession != null)
                {
                    <h5>Hosted by: @SelectedSession.Host.FullName</h5>
                    <h6>Subjects: @Timeline.SubjectInterpreter(SelectedSession.Subjects)</h6>
                    <p>@SelectedSession.Description</p>

                    <div class="dropdown-divider"></div>

                    <h5>Attendants (@SelectedSession.Attendees.Count / @SelectedSession.MaxAttendees)</h5>
                    foreach (var item in SelectedSession.Attendees)
                    {
                        <h6>@item.FullName</h6>
                    }
                }
                else
                {
                   <h5>No Session Selected</h5>
                }               
            </div>
        </div>
        <div class="row">
            <!--textarea @bind="model.Description" readonly placeholder="Write a description" class="form-control col mx-3"></textarea-->
        </div>
        <div class="row my-2">
            @{
                var b = SelectedSession?.Attendees.Any(x => x.Id == state.User.Id);
                if (b == null)
                {
                    <button class="btn btn-primary col mx-3 disabled">Attend</button>
                }
                else
                {
                    if (b.Value)
                    {
                        <button class="btn btn-primary col mx-3" @onclick="Leave">Leave</button>
                    }
                    else
                    {
                        <button class="btn btn-primary col mx-3" @onclick="Attend">Attend</button>
                    }
                }
            }
        </div>
        
    </div>
    <div class="col-sm">
        <Calender @ref="calender" DateSetCallback="SetSelectedDate" Sessions="Sessions" FinderModel="finderModel" SupportMultipleDates="false"></Calender>
    </div>
</div>

<Timeline SubjectFilter="subjectFilter" Sessions="sessionsOnDate" @bind-SelectedSession="SelectedSession" ShowSelfSessions="false"/>

@code
{
    DateTime selectedDate = DateTime.Now.Date;
    Dictionary<DateTime, SessionModel[]> Sessions = new Dictionary<DateTime, SessionModel[]>();

    TimeSpan sessionStart = new TimeSpan(12,0,0);
    TimeSpan sessionDuration = new TimeSpan(1, 0, 0);

    Calender calender;

    bool[] subjects = new bool[16];

    SessionFinderModel finderModel;

    ushort subjectFilter = ushort.MaxValue;

    SessionModel[] sessionsOnDate = new SessionModel[0];

    SessionModel SelectedSession;

    void DigestSubjectsArray()
    {
        subjectFilter = (ushort)subjects.Aggregate((0, 0), (x,y) => (y ? x.Item1 | (1 << x.Item2) : x.Item1, x.Item2 + 1)).Item1;
        subjectFilter = subjectFilter == 0 ? ushort.MaxValue : subjectFilter;
    }

    protected override void OnInitialized()
    {
        finderModel = new SessionFinderModel 
        {
            HostId = null,
            Subjects = ushort.MaxValue,
            GetBooked = false,
            Grade = state.User.Grade,
        };
        
    }

    void SetSelectedDate(DateTime d1, DateTime _)
    {
        selectedDate = d1;

        sessionsOnDate = Sessions
        .Where(x => x.Key == selectedDate.AddDays(1 - selectedDate.Day))
        .SelectMany(x => x.Value)
        .Where(x => x.Start.Date == selectedDate)
        .ToArray();

        StateHasChanged(); 
    }

    async Task Attend()
    {
        Error error = null;
        try
        {
            error = await http.PostJsonAsync<Error>($"api/session/{SelectedSession.Id}/attend", null);
            SelectedSession.Attendees.Add(new StrippedUserModel 
            {
                FirstName = state.User.FirstName,
                LastName = state.User.LastName,
                Id = state.User.Id,
            });
        }
        catch (HttpRequestException)
        {
            logger.log(error?.message);
        }
    }

    async Task Leave()
    {
        Error error = null;
        try
        {
            error = await http.PostJsonAsync<Error>($"api/session/{SelectedSession.Id}/leave", null);
            SelectedSession.Attendees.RemoveAt(SelectedSession.Attendees.Count - 1);
        }
        catch (HttpRequestException)
        {
            logger.log(error?.message);
        }
    }
}