@page "/instruct"
@attribute [Authorize(Roles = "Admin, Instructor")]
@using System.Collections
@inject JSLogger logger
@inject HttpClient http
@inject State state

<div class="row">
    <div class="col-sm">
        <div class="row">
            <div class="col">
                <h5>Set Session Lessons</h5>
                <div class="form-check">
                    <input type="checkbox" class="form-check-input" id="c0" @bind="subjects[0]" @bind:event="oninput" @onchange="() => DigestSubjectsArray()">
                    <label class="form-check-label" for="c0">Math</label>
                </div>
                <div class="form-check">
                    <input type="checkbox" class="form-check-input" id="c1" @bind="subjects[1]" @bind:event="oninput" @onchange="() => DigestSubjectsArray()">
                    <label class="form-check-label" for="c1">Physics</label>
                </div>
                <div class="form-check">
                    <input type="checkbox" class="form-check-input" id="c2" @bind="subjects[2]" @bind:event="oninput" @onchange="() => DigestSubjectsArray()">
                    <label class="form-check-label" for="c2">Chemistry</label>
                </div>
                <div class="form-check">
                    <input type="checkbox" class="form-check-input" id="c3" @bind="subjects[3]" @bind:event="oninput" @onchange="() => DigestSubjectsArray()">
                    <label class="form-check-label" for="c3">Biology</label>
                </div>
                <div class="form-check">
                    <input type="checkbox" class="form-check-input" id="c4" @bind="subjects[4]" @bind:event="oninput" @onchange="() => DigestSubjectsArray()">
                    <label class="form-check-label" for="c4">Literature</label>
                </div>
                <div class="form-check">
                    <input type="checkbox" class="form-check-input" id="c5" @bind="subjects[5]" @bind:event="oninput" @onchange="() => DigestSubjectsArray()">
                    <label class="form-check-label" for="c5">History</label>
                </div>
                <div class="form-check">
                    <input type="checkbox" class="form-check-input" id="c6" @bind="subjects[6]" @bind:event="oninput" @onchange="() => DigestSubjectsArray()">
                    <label class="form-check-label" for="c6">Philosophy</label>
                </div>
                <div class="form-check">
                    <input type="checkbox" class="form-check-input" id="c7" @bind="subjects[7]" @bind:event="oninput" @onchange="() => DigestSubjectsArray()">
                    <label class="form-check-label" for="c7">English</label>
                </div>
                <div class="form-check">
                    <input type="checkbox" class="form-check-input" id="c8" @bind="subjects[8]" @bind:event="oninput" @onchange="() => DigestSubjectsArray()"> <!--Also reserve 9,10 for 8 diff 2nd lang-->
                    <label class="form-check-label" for="c8">2nd Language</label>
                </div>
            </div>
            
            <div class="col">
                 @if (SelectedSession != null)
                {
                    <h5>Hosted by: @SelectedSession.Host.FullName</h5>
                    <h6>Subjects: @Timeline.SubjectInterpreter(SelectedSession.Subjects)</h6>
                    <p>@SelectedSession.Description</p>

                    <div class="dropdown-divider"></div>

                    <h5>Attendants:</h5>
                    foreach (var item in SelectedSession.Attendees)
                    {
                        <h6>@item.FullName</h6>
                    }
                }
                else
                {
                    
                    <div class="form-group">
                        <label for="maxattn">Max Attendees</label>
                        <input type="number" min="1" class="form-control" id="maxattn" @bind="model.MaxAttendees">
                    </div>

                    <div class="form-group">
                        <label for="time-start">Start Time</label>
                        <input type="time" class="form-control" id="time-start" @bind="sessionStartProxy">
                    </div>

                    <div class="form-group">
                        <label for="slot-duration">Slot Duration</label>
                        <input type="time" max="08:00" class="form-control" id="slot-duration" @bind="sessionDurationProxy">
                    </div>
                }
            </div>
        </div>
        <div class="row">
            <textarea @bind="model.Description" placeholder="Write a description" class="form-control col mx-3"></textarea>
        </div>
        <div class="row my-2">
            @{
                var disabled = model.Subjects == 0 || overlap ? "disabled" : "";
            }
            <button class="btn btn-primary col mx-3 @disabled" @onclick="async () => _ = disabled.Length == 0 ? await Host() : 0"> Host Session </button>
        </div>
        
    </div>
    <div class="col-sm">
        <Calender @ref="calender" DateSetCallback="SetSelectedDate" Sessions="Sessions" FinderModel="finderModel" SupportMultipleDates="false"></Calender>
    </div>
</div>

<Timeline Sessions="sessionsOnDate" CreatedSession="model" @bind-Overlap="overlap" SelectedSession="SelectedSession" SelectedSessionChanged="@(newSelection => {SelectedSession = newSelection; UpdateSessionSelections();})"/>

@code
{
    DateTime selectedDate = DateTime.Now.Date;
    Dictionary<DateTime, SessionModel[]> Sessions = new Dictionary<DateTime, SessionModel[]>();

    SessionModel SelectedSession;

    TimeSpan sessionStart = new TimeSpan(12,0,0);
    DateTime sessionStartProxy { get => DateTime.Now.Date + sessionStart; set { sessionStart = value.TimeOfDay; DigestStartAndDuration(); }}
    TimeSpan sessionDuration = new TimeSpan(1, 0, 0);
    DateTime sessionDurationProxy 
    { 
        get => DateTime.Now.Date + sessionDuration; 
        set 
        { 
            sessionDuration = value.TimeOfDay > TimeSpan.FromHours(8) ? TimeSpan.FromHours(8) : value.TimeOfDay;
            DigestStartAndDuration();
        }
    }

    bool overlap = false;

    void UpdateSessionSelections()
    {
        subjects = new BitArray(new int[] { SelectedSession?.Subjects ?? model.Subjects }).Cast<bool>().ToArray();
    }

    void DigestStartAndDuration()
    {
        logger.log(sessionStart);
        model.Start = selectedDate + sessionStart;
        model.End = selectedDate + sessionStart + sessionDuration;
        logger.log(model);
    }

    async Task<int> Host()
    {
        DigestStartAndDuration();
        DigestSubjectsArray();
        logger.log(model);

        var resp = await http.PostJsonAsync<Error>("api/session/host", model);
        if (resp.message == "")
        {
            Sessions.Remove(selectedDate.Date.AddDays(1 - selectedDate.Day));
            await calender.UpdateSessionDictionary();
        }
        return 0;
    }

    HostSessionModel model;

    Calender calender;

    bool[] subjects = new bool[16];

    SessionFinderModel finderModel;

    SessionModel[] sessionsOnDate = new SessionModel[0];

    void DigestSubjectsArray()
    {
        model.Subjects = (ushort)subjects.Aggregate((0, 0), (x,y) => (y ? x.Item1 | (1 << x.Item2) : x.Item1, x.Item2 + 1)).Item1;
        logger.log(Convert.ToString(model.Subjects, toBase: 2));
    }

    protected override void OnInitialized()
    {
        finderModel = new SessionFinderModel 
        {
            HostId = state.User.Id,
            Subjects = ushort.MaxValue,
            GetBooked = true,
            Grade = state.User.Grade,
        };


        model = new HostSessionModel()
        {
            MaxAttendees = 1,
            Description = "A description",
            Subjects = 0//0b0000_0000_0000_0000,
        };
        
        DigestStartAndDuration();
    }

    void SetSelectedDate(DateTime d1, DateTime _)
    {
        selectedDate = d1;

        DigestStartAndDuration();

        sessionsOnDate = Sessions
        .Where(x => x.Key == selectedDate.AddDays(1 - selectedDate.Day))
        .SelectMany(x => x.Value)
        .Where(x => x.Start.Date == selectedDate)
        .ToArray();

        StateHasChanged(); 
    }

}