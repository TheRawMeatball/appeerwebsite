@page "/settings"
@inject JSLogger logger
@inject State state
@inject HttpClient http
@using System.Text.Json

<div class="col-sm-6 col-sm-offset-3">
    <h3> Change Profile Settings </h3>
    <EditForm Model="UpdateModel" OnValidSubmit="HandleUpdate" OnInvalidSubmit="() => {ShowErrors=true;}">
        <DataAnnotationsValidator />
        <div class="form-group">
            <label for="email">Email</label>
            <InputText Id="email" class="form-control" @bind-Value="UpdateModel.Email"/>
        </div>
        <div class="form-group">
            <label for="password">Password</label>
            <InputText Id="password" type="password" class="form-control" @bind-Value="UpdateModel.Password" />
        </div>
        <div class="form-group">
            <label for="firstName">FirstName</label>
            <InputText Id="firstName" class="form-control" @bind-Value="UpdateModel.FirstName" />
        </div>
        <div class="form-group">
            <label for="lastName">LastName</label>
            <InputText Id="lastName" class="form-control" @bind-Value="UpdateModel.LastName" />
        </div>
        <div class="form-group">
            <select @bind="@UpdateModel.Grade" class="form-control">
                <option value="0"> Prep </option>
                <option value="9"> 9 </option>
                <option value="10"> 10 </option>
                <option value="11"> 11 </option>
                <option value="12"> 12 </option>
                <option value="13"> Graduated </option>
            </select>
        </div>
        <div class="custom-file">
            <InputFile name="avatar" accept="image/*" id="avatar-select" class="custom-file-input" OnChange="HandleSelection"/>
            <label for="avatar-select" class="custom-file-label"> @FileString </label>
        </div>
        <button type="submit" class="btn btn-primary mt-3">Submit</button>
        @if (ShowErrors)
        {
            <div class="alert alert-danger mt-4" role="alert">
                <span>@error</span>
                <ValidationMessage For="@(() => UpdateModel.Password)" />
                <ValidationMessage For="@(() => UpdateModel.Email)" />
                <ValidationMessage For="@(() => UpdateModel.FirstName)" />
                <ValidationMessage For="@(() => UpdateModel.LastName)" />
                <ValidationMessage For="@(() => UpdateModel.Grade)" />
            </div> 
        }

        @if (success)
        {
            <div class="alert alert-success mt-4">Update Successful</div>
        }
    </EditForm>
</div>

@code {

    private UpdateModel UpdateModel;

    protected override void OnInitialized()
    {
        UpdateModel = new UpdateModel() 
        {
            FirstName = "",
            LastName = "",
            Email = "",
            Password = "",
            Grade = state.User.Grade
        };
    }

    IFileListEntry avatar;
    private bool ShowErrors;
    private string error;
    bool success;
    private async Task HandleUpdate()
    {
        ShowErrors = false;

        var req = new MultipartFormDataContent();
            
            if (avatar != null)
            {
                using (MemoryStream ms = new MemoryStream())
                {
                    await avatar.Data.CopyToAsync(ms);
                    req.Add(new ByteArrayContent(ms.GetBuffer()), "avatar", avatar.Name);
                }
            }

            req.Add(new StringContent(UpdateModel.Email), "Email");
            req.Add(new StringContent(UpdateModel.FirstName), "FirstName");
            req.Add(new StringContent(UpdateModel.LastName), "LastName");
            req.Add(new StringContent(UpdateModel.Password), "Password");
            req.Add(new StringContent(UpdateModel.Grade.ToString()), "Grade");

            var response = await http.PatchAsync($"api/users/{state.User.Id}", req);
            var result = JsonSerializer.Deserialize<string[]>(await response.Content.ReadAsStringAsync(), new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

        if (result.Length == 0)
        {
            logger.log("Done");
            success = true;
        }
        else
        {
            error = result[0];
            ShowErrors = true;
            success = false;
        }
    }
    

    private string FileString = "Select Avatar";
    void HandleSelection(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();
        if (file != null)
        {
            FileString = file.Name;
            avatar = file;
        }
    }
}